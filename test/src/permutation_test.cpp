#include "../../include/hash_utils.h"

#include <gtest/gtest.h>

TEST(PermutationTests, theta)
{
    uint64_t zero_state[25] = {0};
    auto parity = hash::utils::permutations::permutations_helpers::parities(zero_state);
    EXPECT_EQ(parity[0], 0x0000000000000000);
    EXPECT_EQ(parity[1], 0x0000000000000000);
    EXPECT_EQ(parity[2], 0x0000000000000000);
    EXPECT_EQ(parity[3], 0x0000000000000000);
    EXPECT_EQ(parity[4], 0x0000000000000000);

    uint64_t state[25] = {
        0x0000000000000000, 0x0000000000000001, 0x0000000000000002, 0x0000000000000003, 0x0000000000000004,
        0x0000000000000005, 0x0000000000000006, 0x0000000000000007, 0x0000000000000008, 0x0000000000000009,
        0x000000000000000A, 0x000000000000000B, 0x000000000000000C, 0x000000000000000D, 0x000000000000000E,
        0x000000000000000F, 0x0000000000000010, 0x0000000000000011, 0x0000000000000012, 0x0000000000000013,
        0x0000000000000014, 0x0000000000000015, 0x0000000000000016, 0x0000000000000017, 0x0000000000000018
    };

    parity = hash::utils::permutations::permutations_helpers::parities(state);
    EXPECT_EQ(parity[0], 0x0000000000000014);
    EXPECT_EQ(parity[1], 0x0000000000000009);
    EXPECT_EQ(parity[2], 0x000000000000000E);
    EXPECT_EQ(parity[3], 0x0000000000000003);
    EXPECT_EQ(parity[4], 0x0000000000000008);

    hash::utils::permutations::theta(state);

    EXPECT_EQ(state[0],  0x000000000000001A);
    EXPECT_EQ(state[1],  0x0000000000000009);
    EXPECT_EQ(state[2],  0x000000000000000D);
    EXPECT_EQ(state[3],  0x000000000000001D);
    EXPECT_EQ(state[4],  0x000000000000002F);

    EXPECT_EQ(state[5],  0x000000000000001F);
    EXPECT_EQ(state[6],  0x000000000000000E);
    EXPECT_EQ(state[7],  0x0000000000000008);
    EXPECT_EQ(state[8],  0x0000000000000016);
    EXPECT_EQ(state[9],  0x0000000000000022);

    EXPECT_EQ(state[10], 0x0000000000000010);
    EXPECT_EQ(state[11], 0x0000000000000003);
    EXPECT_EQ(state[12], 0x0000000000000003);
    EXPECT_EQ(state[13], 0x0000000000000013);
    EXPECT_EQ(state[14], 0x0000000000000025);

    EXPECT_EQ(state[15], 0x0000000000000015);
    EXPECT_EQ(state[16], 0x0000000000000018);
    EXPECT_EQ(state[17], 0x000000000000001E);
    EXPECT_EQ(state[18], 0x000000000000000C);
    EXPECT_EQ(state[19], 0x0000000000000038);

    EXPECT_EQ(state[20], 0x000000000000000E);
    EXPECT_EQ(state[21], 0x000000000000001D);
    EXPECT_EQ(state[22], 0x0000000000000019);
    EXPECT_EQ(state[23], 0x0000000000000009);
    EXPECT_EQ(state[24], 0x0000000000000033);
}

TEST(PermutationTests, rho)
{
    uint64_t state[25] = {
        0x0000000000000000, 0x0000000000000001, 0x0000000000000002, 0x0000000000000003, 0x0000000000000004,
        0x0000000000000005, 0x0000000000000006, 0x0000000000000007, 0x0000000000000008, 0x0000000000000009,
        0x000000000000000A, 0x000000000000000B, 0x000000000000000C, 0x000000000000000D, 0x000000000000000E,
        0x000000000000000F, 0x0000000000000010, 0x0000000000000011, 0x0000000000000012, 0x0000000000000013,
        0x0000000000000014, 0x0000000000000015, 0x0000000000000016, 0x0000000000000017, 0x0000000000000018
    };
    hash::utils::permutations::theta(state);

    hash::utils::permutations::rho(state);

    EXPECT_EQ(state[0],  0x000000000000001A);
    EXPECT_EQ(state[1],  0x0000000000000012);
    EXPECT_EQ(state[2],  0x0000000000000068);
    EXPECT_EQ(state[3],  0x0000000000000740);
    EXPECT_EQ(state[4],  0x000000000000BC00);

    EXPECT_EQ(state[5],  0x00000000000F8000);
    EXPECT_EQ(state[6],  0x0000000001C00000);
    EXPECT_EQ(state[7],  0x0000000080000000);
    EXPECT_EQ(state[8],  0x0000016000000000);
    EXPECT_EQ(state[9],  0x0004400000000000);

    EXPECT_EQ(state[10], 0x0800000000000000);
    EXPECT_EQ(state[11], 0x000000000000000C);
    EXPECT_EQ(state[12], 0x000000000000C000);
    EXPECT_EQ(state[13], 0x0000000098000000);
    EXPECT_EQ(state[14], 0x00004A0000000000);

    EXPECT_EQ(state[15], 0x1500000000000000);
    EXPECT_EQ(state[16], 0x0000000000001800);
    EXPECT_EQ(state[17], 0x000000003C000000);
    EXPECT_EQ(state[18], 0x0000600000000000);
    EXPECT_EQ(state[19], 0x000000000000000E);

    EXPECT_EQ(state[20], 0x0000000000380000);
    EXPECT_EQ(state[21], 0x00000E8000000000);
    EXPECT_EQ(state[22], 0x2000000000000003);
    EXPECT_EQ(state[23], 0x0000000000900000);
    EXPECT_EQ(state[24], 0x0003300000000000);

}

TEST(PermutationTests, pi)
{
    uint64_t state[25] = {
        0x0000000000000000, 0x0000000000000001, 0x0000000000000002, 0x0000000000000003, 0x0000000000000004,
        0x0000000000000005, 0x0000000000000006, 0x0000000000000007, 0x0000000000000008, 0x0000000000000009,
        0x000000000000000A, 0x000000000000000B, 0x000000000000000C, 0x000000000000000D, 0x000000000000000E,
        0x000000000000000F, 0x0000000000000010, 0x0000000000000011, 0x0000000000000012, 0x0000000000000013,
        0x0000000000000014, 0x0000000000000015, 0x0000000000000016, 0x0000000000000017, 0x0000000000000018
    };
    hash::utils::permutations::theta(state);
    hash::utils::permutations::rho(state);

    hash::utils::permutations::pi(state);

    EXPECT_EQ(state[0],  0x000000000000001A);
    EXPECT_EQ(state[1],  0x0000000001C00000);
    EXPECT_EQ(state[2],  0x000000000000C000);
    EXPECT_EQ(state[3],  0x0000600000000000);
    EXPECT_EQ(state[4],  0x0003300000000000);

    EXPECT_EQ(state[5],  0x0000000000000740);
    EXPECT_EQ(state[6],  0x0004400000000000);
    EXPECT_EQ(state[7],  0x0800000000000000);
    EXPECT_EQ(state[8],  0x0000000000001800);
    EXPECT_EQ(state[9],  0x2000000000000003);

    EXPECT_EQ(state[10], 0x0000000000000012);
    EXPECT_EQ(state[11], 0x0000000080000000);
    EXPECT_EQ(state[12], 0x0000000098000000);
    EXPECT_EQ(state[13], 0x000000000000000E);
    EXPECT_EQ(state[14], 0x0000000000380000);

    EXPECT_EQ(state[15], 0x000000000000BC00);
    EXPECT_EQ(state[16], 0x00000000000F8000);
    EXPECT_EQ(state[17], 0x000000000000000C);
    EXPECT_EQ(state[18], 0x000000003C000000);
    EXPECT_EQ(state[19], 0x0000000000900000);

    EXPECT_EQ(state[20], 0x0000000000000068);
    EXPECT_EQ(state[21], 0x0000016000000000);
    EXPECT_EQ(state[22], 0x00004A0000000000);
    EXPECT_EQ(state[23], 0x1500000000000000);
    EXPECT_EQ(state[24], 0x00000E8000000000);
}

TEST(PermutationTests, chi)
{
    uint64_t state[25] = {
        0x0000000000000000, 0x0000000000000001, 0x0000000000000002, 0x0000000000000003, 0x0000000000000004,
        0x0000000000000005, 0x0000000000000006, 0x0000000000000007, 0x0000000000000008, 0x0000000000000009,
        0x000000000000000A, 0x000000000000000B, 0x000000000000000C, 0x000000000000000D, 0x000000000000000E,
        0x000000000000000F, 0x0000000000000010, 0x0000000000000011, 0x0000000000000012, 0x0000000000000013,
        0x0000000000000014, 0x0000000000000015, 0x0000000000000016, 0x0000000000000017, 0x0000000000000018
    };
    hash::utils::permutations::theta(state);
    hash::utils::permutations::rho(state);
    hash::utils::permutations::pi(state);
    
    hash::utils::permutations::chi(state);

    EXPECT_EQ(state[0],  0x000000000000C01A);
    EXPECT_EQ(state[1],  0x0000600001C00000);
    EXPECT_EQ(state[2],  0x000310000000C000);
    EXPECT_EQ(state[3],  0x0000600000000740);
    EXPECT_EQ(state[4],  0x0007700000000000);

    EXPECT_EQ(state[5],  0x0800000000000740);
    EXPECT_EQ(state[6],  0x0004400000001800);
    EXPECT_EQ(state[7],  0x2800000000000003);
    EXPECT_EQ(state[8],  0x0000000000001810);
    EXPECT_EQ(state[9],  0x2000000080000003);

    EXPECT_EQ(state[10], 0x0000000018000012);
    EXPECT_EQ(state[11], 0x000000008000000E);
    EXPECT_EQ(state[12], 0x0000000098380000);
    EXPECT_EQ(state[13], 0x000000000000BC0E);
    EXPECT_EQ(state[14], 0x0000000000370000);

    EXPECT_EQ(state[15], 0x000000000000BC0C);
    EXPECT_EQ(state[16], 0x000000003C0F8000);
    EXPECT_EQ(state[17], 0x000000000090000C);
    EXPECT_EQ(state[18], 0x000000003C000068);
    EXPECT_EQ(state[19], 0x0000016000900000);

    EXPECT_EQ(state[20], 0x00004A0000000068);
    EXPECT_EQ(state[21], 0x1500016000000000);
    EXPECT_EQ(state[22], 0x0000448000000000);
    EXPECT_EQ(state[23], 0x150000000000001A);
    EXPECT_EQ(state[24], 0x00000E8001C00000);
}

TEST(PermutationTests, iota)
{
    uint64_t state[25] = {
        0x0000000000000000, 0x0000000000000001, 0x0000000000000002, 0x0000000000000003, 0x0000000000000004,
        0x0000000000000005, 0x0000000000000006, 0x0000000000000007, 0x0000000000000008, 0x0000000000000009,
        0x000000000000000A, 0x000000000000000B, 0x000000000000000C, 0x000000000000000D, 0x000000000000000E,
        0x000000000000000F, 0x0000000000000010, 0x0000000000000011, 0x0000000000000012, 0x0000000000000013,
        0x0000000000000014, 0x0000000000000015, 0x0000000000000016, 0x0000000000000017, 0x0000000000000018
    };
    hash::utils::permutations::theta(state);
    hash::utils::permutations::rho(state);
    hash::utils::permutations::pi(state);
    hash::utils::permutations::chi(state);

    hash::utils::permutations::iota(state, 0);

    EXPECT_EQ(state[0],  0x000000000000C01B);
    EXPECT_EQ(state[1],  0x0000600001C00000);
    EXPECT_EQ(state[2],  0x000310000000C000);
    EXPECT_EQ(state[3],  0x0000600000000740);
    EXPECT_EQ(state[4],  0x0007700000000000);

    EXPECT_EQ(state[5],  0x0800000000000740);
    EXPECT_EQ(state[6],  0x0004400000001800);
    EXPECT_EQ(state[7],  0x2800000000000003);
    EXPECT_EQ(state[8],  0x0000000000001810);
    EXPECT_EQ(state[9],  0x2000000080000003);

    EXPECT_EQ(state[10], 0x0000000018000012);
    EXPECT_EQ(state[11], 0x000000008000000E);
    EXPECT_EQ(state[12], 0x0000000098380000);
    EXPECT_EQ(state[13], 0x000000000000BC0E);
    EXPECT_EQ(state[14], 0x0000000000370000);

    EXPECT_EQ(state[15], 0x000000000000BC0C);
    EXPECT_EQ(state[16], 0x000000003C0F8000);
    EXPECT_EQ(state[17], 0x000000000090000C);
    EXPECT_EQ(state[18], 0x000000003C000068);
    EXPECT_EQ(state[19], 0x0000016000900000);

    EXPECT_EQ(state[20], 0x00004A0000000068);
    EXPECT_EQ(state[21], 0x1500016000000000);
    EXPECT_EQ(state[22], 0x0000448000000000);
    EXPECT_EQ(state[23], 0x150000000000001A);
    EXPECT_EQ(state[24], 0x00000E8001C00000);
}
